@model AchievementsPageViewModel
@{
    ViewData["Title"] = "Achievements & Awards";
}

<div class="bg-gray-50 dark:bg-gray-900 min-h-screen py-12">
    <div class="container mx-auto px-4">
        <!-- Page Header -->
        <div class="text-center mb-12">
            <h1 class="heading-xl text-gray-900 dark:text-white mb-4">
                <i class="fas fa-trophy text-yellow-500 mr-3"></i>
                Achievements & Awards
            </h1>
            <p class="text-body max-w-3xl mx-auto">
                A comprehensive showcase of my accomplishments in competitive programming, data science, academic excellence, and professional development.
            </p>
        </div>

        <!-- Kaggle Statistics Dashboard -->
        @if (Model.KaggleAchievements?.Any() == true)
        {
            <div class="bg-gradient-to-r from-blue-600 to-purple-700 rounded-2xl p-8 mb-12 text-white">
                <div class="text-center mb-8">
                    <h2 class="text-3xl font-bold mb-2">
                        <i class="fab fa-kaggle mr-3"></i>
                        Kaggle Performance
                    </h2>
                    <p class="text-blue-100">Data Science Competition Excellence</p>
                </div>
                
                <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-6">
                    <div class="text-center">
                        <div class="text-3xl font-bold">@Model.TotalKaggleAchievements</div>
                        <div class="text-sm text-blue-100">Total Achievements</div>
                    </div>
                    <div class="text-center">
                        <div class="text-3xl font-bold text-yellow-300">@Model.GoldMedals</div>
                        <div class="text-sm text-blue-100">Gold Medals</div>
                    </div>
                    <div class="text-center">
                        <div class="text-3xl font-bold text-gray-300">@Model.SilverMedals</div>
                        <div class="text-sm text-blue-100">Silver Medals</div>
                    </div>
                    <div class="text-center">
                        <div class="text-3xl font-bold text-orange-300">@Model.BronzeMedals</div>
                        <div class="text-sm text-blue-100">Bronze Medals</div>
                    </div>
                    <div class="text-center">
                        <div class="text-3xl font-bold">@Model.CompetitionAchievements</div>
                        <div class="text-sm text-blue-100">Competitions</div>
                    </div>
                    <div class="text-center">
                        <div class="text-3xl font-bold">@Model.DatasetAchievements</div>
                        <div class="text-sm text-blue-100">Datasets</div>
                    </div>
                    <div class="text-center">
                        <div class="text-3xl font-bold">@Model.NotebookAchievements</div>
                        <div class="text-sm text-blue-100">Notebooks</div>
                    </div>
                </div>
                
                <div class="text-center mt-6">
                    <a href="https://www.kaggle.com/shakhoyatshujon" target="_blank" class="bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors">
                        <i class="fas fa-external-link-alt mr-2"></i>
                        View Kaggle Profile
                    </a>
                </div>
            </div>
        }

        <!-- Filter Controls -->
        <div class="bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-sm">
            <div class="flex flex-wrap gap-4 items-center justify-between">
                <div class="flex flex-wrap gap-2">
                    <button onclick="filterAchievements('All')" class="filter-btn active" data-filter="All">
                        All Achievements
                    </button>
                    <button onclick="filterAchievements('Kaggle')" class="filter-btn" data-filter="Kaggle">
                        <i class="fab fa-kaggle mr-1"></i>
                        Kaggle
                    </button>
                    <button onclick="filterAchievements('Traditional')" class="filter-btn" data-filter="Traditional">
                        <i class="fas fa-award mr-1"></i>
                        Traditional
                    </button>
                    <button onclick="filterAchievements('Competition')" class="filter-btn" data-filter="Competition">
                        <i class="fas fa-trophy mr-1"></i>
                        Competitions
                    </button>
                    <button onclick="filterAchievements('Dataset')" class="filter-btn" data-filter="Dataset">
                        <i class="fas fa-database mr-1"></i>
                        Datasets
                    </button>
                    <button onclick="filterAchievements('Notebook')" class="filter-btn" data-filter="Notebook">
                        <i class="fas fa-book mr-1"></i>
                        Notebooks
                    </button>
                </div>
                
                <div class="flex items-center gap-2">
                    <label class="text-sm text-gray-600 dark:text-gray-400">Sort by:</label>
                    <select onchange="sortAchievements(this.value)" class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white">
                        <option value="date-desc">Latest First</option>
                        <option value="date-asc">Oldest First</option>
                        <option value="rank-asc">Best Rank First</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Achievements Grid -->
        <div id="achievements-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Kaggle Achievements -->
            @foreach (var achievement in Model.KaggleAchievements)
            {
                <div class="achievement-card kaggle-achievement @achievement.Type.ToLower()-achievement bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 p-6"
                     data-category="Kaggle" 
                     data-type="@achievement.Type" 
                     data-date="@achievement.AchievedDate.ToString("yyyy-MM-dd")"
                     data-rank="@(achievement.Rank ?? 9999)">
                    
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex items-center">
                            @if (achievement.Medal == "Gold")
                            {
                                <i class="fas fa-medal text-yellow-500 text-2xl mr-2"></i>
                            }
                            else if (achievement.Medal == "Silver")
                            {
                                <i class="fas fa-medal text-gray-400 text-2xl mr-2"></i>
                            }
                            else if (achievement.Medal == "Bronze")
                            {
                                <i class="fas fa-medal text-orange-600 text-2xl mr-2"></i>
                            }
                            else
                            {
                                <i class="fas fa-trophy text-blue-500 text-2xl mr-2"></i>
                            }
                            <span class="bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 px-3 py-1 rounded-full text-sm font-medium">
                                @achievement.Type
                            </span>
                        </div>
                        @if (achievement.Rank.HasValue)
                        {
                            <span class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300 px-3 py-1 rounded-full text-sm font-semibold">
                                #@achievement.Rank
                            </span>
                        }
                    </div>
                    
                    <h3 class="font-bold text-gray-900 dark:text-white mb-3 text-lg leading-tight">@achievement.Title</h3>
                    <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">@achievement.Description</p>
                    
                    <div class="space-y-2 mb-4">
                        @if (achievement.Score.HasValue)
                        {
                            <div class="flex items-center text-sm text-gray-500 dark:text-gray-400">
                                <i class="fas fa-chart-line mr-2"></i>
                                Score: @achievement.Score.Value.ToString("F4")
                            </div>
                        }
                        @if (achievement.TotalParticipants.HasValue)
                        {
                            <div class="flex items-center text-sm text-gray-500 dark:text-gray-400">
                                <i class="fas fa-users mr-2"></i>
                                @achievement.TotalParticipants participants
                            </div>
                        }
                        <div class="flex items-center text-sm text-gray-500 dark:text-gray-400">
                            <i class="fas fa-calendar mr-2"></i>
                            @achievement.AchievedDate.ToString("MMMM yyyy")
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(achievement.Tags))
                    {
                        <div class="flex flex-wrap gap-1 mb-4">
                            @foreach (var tag in achievement.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                            {
                                <span class="bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-1 rounded text-xs">
                                    @tag.Trim()
                                </span>
                            }
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(achievement.ExternalUrl))
                    {
                        <a href="@achievement.ExternalUrl" target="_blank" class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium">
                            <i class="fas fa-external-link-alt mr-2"></i>
                            View Details
                        </a>
                    }
                </div>
            }

            <!-- Traditional Achievements -->
            @foreach (var achievement in Model.TraditionalAchievements)
            {
                <div class="achievement-card traditional-achievement bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 p-6"
                     data-category="Traditional" 
                     data-type="Academic" 
                     data-date="@achievement.Date.ToString("yyyy-MM-dd")"
                     data-rank="0">
                    
                    <div class="flex items-center mb-4">
                        <i class="fas fa-award text-purple-500 text-2xl mr-3"></i>
                        <span class="bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 px-3 py-1 rounded-full text-sm font-medium">
                            @achievement.Category
                        </span>
                    </div>
                    
                    <h3 class="font-bold text-gray-900 dark:text-white mb-3 text-lg leading-tight">@achievement.Title</h3>
                    <p class="text-gray-600 dark:text-gray-400 mb-4">@achievement.Description</p>
                    
                    <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4">
                        <i class="fas fa-calendar mr-2"></i>
                        @achievement.Date.ToString("MMMM yyyy")
                    </div>
                    
                    @if (!string.IsNullOrEmpty(achievement.Institution))
                    {
                        <div class="flex items-center text-sm text-gray-500 dark:text-gray-400">
                            <i class="fas fa-building mr-2"></i>
                            @achievement.Institution
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Empty State -->
        <div id="no-achievements" class="text-center py-12 hidden">
            <i class="fas fa-search text-6xl text-gray-300 dark:text-gray-600 mb-4"></i>
            <h3 class="text-xl font-semibold text-gray-500 dark:text-gray-400 mb-2">No achievements found</h3>
            <p class="text-gray-400 dark:text-gray-500">Try adjusting your filters to see more results.</p>
        </div>
    </div>
</div>

<style>
    .filter-btn {
        @apply px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors;
    }
    
    .filter-btn.active {
        @apply bg-blue-600 text-white border-blue-600 hover:bg-blue-700;
    }
    
    .achievement-card {
        transition: all 0.3s ease;
    }
    
    .achievement-card:hover {
        transform: translateY(-2px);
    }
    
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>

<script>
    function filterAchievements(filter) {
        const achievements = document.querySelectorAll('.achievement-card');
        const noAchievements = document.getElementById('no-achievements');
        const filterBtns = document.querySelectorAll('.filter-btn');
        let visibleCount = 0;
        
        // Update button states
        filterBtns.forEach(btn => {
            btn.classList.remove('active');
            if (btn.getAttribute('data-filter') === filter) {
                btn.classList.add('active');
            }
        });
        
        // Filter achievements
        achievements.forEach(card => {
            const category = card.getAttribute('data-category');
            const type = card.getAttribute('data-type');
            let shouldShow = false;
            
            if (filter === 'All') {
                shouldShow = true;
            } else if (filter === 'Kaggle' && category === 'Kaggle') {
                shouldShow = true;
            } else if (filter === 'Traditional' && category === 'Traditional') {
                shouldShow = true;
            } else if (filter === 'Competition' && type === 'Competition') {
                shouldShow = true;
            } else if (filter === 'Dataset' && type === 'Dataset') {
                shouldShow = true;
            } else if (filter === 'Notebook' && type === 'Notebook') {
                shouldShow = true;
            }
            
            if (shouldShow) {
                card.style.display = 'block';
                visibleCount++;
            } else {
                card.style.display = 'none';
            }
        });
        
        // Show/hide empty state
        if (visibleCount === 0) {
            noAchievements.classList.remove('hidden');
        } else {
            noAchievements.classList.add('hidden');
        }
    }
    
    function sortAchievements(sortBy) {
        const container = document.getElementById('achievements-container');
        const achievements = Array.from(container.querySelectorAll('.achievement-card'));
        
        achievements.sort((a, b) => {
            if (sortBy === 'date-desc') {
                return new Date(b.getAttribute('data-date')) - new Date(a.getAttribute('data-date'));
            } else if (sortBy === 'date-asc') {
                return new Date(a.getAttribute('data-date')) - new Date(b.getAttribute('data-date'));
            } else if (sortBy === 'rank-asc') {
                return parseInt(a.getAttribute('data-rank')) - parseInt(b.getAttribute('data-rank'));
            }
        });
        
        // Re-append sorted elements
        achievements.forEach(achievement => {
            container.appendChild(achievement);
        });
    }
    
    // Initialize filters
    document.addEventListener('DOMContentLoaded', function() {
        filterAchievements('All');
    });
</script>
